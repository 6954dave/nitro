import os, shutil
from waflib import Options

MAINTAINER         = 'adam.sylvester@gd-ais.com'
VERSION            = '1.0'
LANG               = 'c'
NAME               = 'JPEGDecompress'
LIBNAME            = 'JPEGDecompress'
REMOVEPLUGINPREFIX = True
USE                = 'LIBJPEG nitf-c'
PLUGIN             = 'nitf'
DEFINES            = 'NITF_MODULE_EXPORTS'


fname = 'jpeg-6b'

def options(opt):
    pass

def configure(conf):
    platform = Options.platform
    defs = []
    if platform.startswith('win32'):
        defs.append('/DHAVE_PROTOTYPES')
        defs.append('/UNEED_BSD_STRINGS')
        defs.append('/UNEED_SYS_TYPES_H')
        defs.append('/UNEED_FAR_POINTERS')
        defs.append('/UNEED_SHORT_EXTERNAL_NAMES')
        defs.append('/UINCOMPLETE_TYPES_BROKEN')
    conf.env.append_value('CFLAGS_LIBJPEG', defs)


def build(bld):
    variant = bld.env['VARIANT']
    env = bld.all_envs[variant]
        
    #---------------------------------------------------------------------------
    ###### LIB-JPEG
    ut = bld(env=env.derive(), path=bld.path.find_dir('build'), fname='%s.zip' % fname)
    ut.features = ['unzip']
    bld.add_group()
    
    driverNode = bld.path.make_node('build').make_node(fname)
    
    defDict = dict()
    configH = bld(output='jconfig.h', path=driverNode,
                               defs=defDict, before='LIBJPEG',
                               env=env.derive())
    configH.features = ['makeHeader']
    
    #shutil.copy('jconfig.vc', 'jconfig.h')

    sources = (
        'jcapimin.c',
        'jccoefct.c',
        'jccolor.c',
        'jcdctmgr.c',
        'jchuff.c',
        'jcinit.c',
        'jcmainct.c',
        'jcmarker.c',
        'jcmaster.c',
        'jcomapi.c',
        'jcparam.c',
        'jcphuff.c',
        'jcprepct.c',
        'jcsample.c',
        'jctrans.c',
        'jdapimin.c',
        'jdapistd.c',
        'jdatadst.c',
        'jdatasrc.c',
        'jdcoefct.c',
        'jdcolor.c',
        'jddctmgr.c',
        'jdhuff.c',
        'jdinput.c',
        'jdmainct.c',
        'jdmarker.c',
        'jdmaster.c',
        'jdmerge.c',
        'jdphuff.c',
        'jdpostct.c',
        'jdsample.c',
        'jdtrans.c',
        'jerror.c',
        'jfdctflt.c',
        'jfdctfst.c',
        'jfdctint.c',
        'jidctflt.c',
        'jidctfst.c',
        'jidctint.c',
        'jidctred.c',
        'jmemansi.c',
        'jmemmgr.c',
        'jquant1.c',
        'jquant2.c',
        'jutils.c',
    )
        
    jpeg = bld(features='c cstlib', includes='.',
                            source=sources,
                            target='jpeg', path=driverNode,
                            export_includes='.',
                            uselib='SOCKET',
                            env=env.derive(),
                            name='LIBJPEG')
    bld.add_group()
    
    #---------------------------------------------------------------------------
    ###### JPEG PLUG-IN

    bld.plugin(**globals())

def distclean(context):
    unzipPath = os.path.join(context.path.abspath(), 'build', fname)
    try:
        if os.path.exists(unzipPath):
            shutil.rmtree(unzipPath, ignore_errors=True)
    except:{}

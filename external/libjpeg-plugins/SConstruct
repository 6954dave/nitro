import sys, os, glob, zipfile, shutil
from cStringIO import StringIO

sys.path.append('../../build/scons')
import scons_utils
sys.path.pop()


#borrowed from http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/465649
def extract( filename, dir ):
    zf = zipfile.ZipFile( filename )
    namelist = zf.namelist()
    dirlist = filter( lambda x: x.endswith( '/' ), namelist )
    filelist = filter( lambda x: not x.endswith( '/' ), namelist )
    # make base
    pushd = os.getcwd()
    if not os.path.isdir( dir ):
        os.mkdir( dir )
    os.chdir( dir )
    # create directory structure
    dirlist.sort()
    for dirs in dirlist:
        dirs = dirs.split( '/' )
        prefix = ''
        for dir in dirs:
            dirname = os.path.join( prefix, dir )
            if dir and not os.path.isdir( dirname ):
                os.mkdir( dirname )
            prefix = dirname
    # extract files
    for fn in filelist:
        try:
            out = open( fn, 'wb' )
            buffer = StringIO( zf.read( fn ))
            buflen = 2 ** 20
            datum = buffer.read( buflen )
            while datum:
                out.write( datum )
                datum = buffer.read( buflen )
            out.close()
        finally:
            print fn
    os.chdir( pushd )


################################################################################
# PROJECT SPECIFIC VARS/CODE
################################################################################
#==============================================================================#

LIB_NAME = 'LibjpegDecompress'

# Handle command-line options
opts = scons_utils.add_default_options(Options())
opts.Add(PathOption('jpeghome', 'the path of the jpeg development installation directory', None))
opts.Add('build_jpeg', 'build_jpeg', 1)
env = Environment(options = opts, ENV = os.environ)
Help(opts.GenerateHelpText(env))

# Get the target name, and setup all the system-dependent flags and libs
local_lib = scons_utils.do_configure(env)
print "Building %s for %s" % (LIB_NAME, env['PLATFORM'])

include_path = ['../../c/nitf/include']
lib_path = ['../../c/nitf/%s' % local_lib]

depends = ['nitf-c']
if sys.platform.startswith('win32'):
    depends.append('Ws2_32') # for ntohs on Windows

if env.subst('$jpeghome'):
    jpeg_home = env.subst('$jpeghome')
    include_path.append(os.path.normpath(os.path.join(jpeg_home, 'include')))
    jpeg_libdir = os.path.normpath(os.path.join(jpeg_home, 'lib'))
    lib_path.append(jpeg_libdir)
    for dep in ['jpeg.lib', 'libjpeg.lib']:
        if os.path.exists(os.path.join(jpeg_libdir, dep)):
            depends.append(dep)
elif env.subst('$build_jpeg') and env.subst('$build_jpeg') != '0':
    print 'HERE'
    #unzip the jpeg lib and copy the SConstruct there
    extract('build/jpeg-6b.zip', './')
    shutil.copy('build/SConstruct_jpeg', 'jpeg-6b/SConstruct')
    SConscript(["jpeg-6b/SConstruct",],)
    include_path.append('jpeg-6b')
    lib_path.append(os.path.join('jpeg-6b', local_lib))
    depends.append('jpeg.lib')

print env.subst('$build_jpeg') and env.subst('$build_jpeg') != '0'
    
sourceFiles = scons_utils.get_source_files('./source', ext='.c', platform=env['PLATFORM'])
build_libs = [{'source':sourceFiles, 'lib':'%s' % LIB_NAME, 'dynamic':True,
        'depends':depends}]


env.Append(CPPPATH = include_path)
env.Append(CCFLAGS = ['-DNITF_MODULE_EXPORTS'])

libs = scons_utils.make_libs(env, build_libs, local_lib, lib_path)

#==============================================================================#

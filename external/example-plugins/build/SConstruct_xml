import sys, os, glob, shutil

sys.path.append('../../../build/utils')
import scons_utils
sys.path.pop()

################################################################################
# PROJECT SPECIFIC VARS/CODE
################################################################################
#==============================================================================#

LIB_NAME = 'libxml2'

# Handle command-line options
opts = scons_utils.addDefaultOptions(Options())
env = Environment(options = opts, ENV = os.environ)
Help(opts.GenerateHelpText(env))

# Get the target name, and setup all the system-dependent flags and libs
local_lib = scons_utils.doConfigure(env)
print "Building %s for %s" % (LIB_NAME, env['PLATFORM'])

include_path = ['./include']
sourceFiles = (
    'SAX.c', 'entities.c', 'encoding.c', 'error.c',
    'parserInternals.c', 'parser.c', 'tree.c', 'hash.c', 'list.c', 'xmlIO.c',
    'xmlmemory.c', 'uri.c', 'valid.c', 'xlink.c', 'HTMLparser.c', 'HTMLtree.c',
    'debugXML.c', 'xpath.c', 'xpointer.c', 'xinclude.c', 'nanohttp.c', 'nanoftp.c',
    'DOCBparser.c', 'catalog.c', 'globals.c', 'threads.c', 'c14n.c', 'xmlstring.c',
    'xmlregexp.c', 'xmlschemas.c', 'xmlschemastypes.c', 'xmlunicode.c',
    'xmlreader.c', 'relaxng.c', 'dict.c', 'SAX2.c', 'xmlwriter.c', 'legacy.c',
    'chvalid.c', 'pattern.c', 'xmlsave.c', 'xmlmodule.c', 'schematron.c',
    'triostr.c', 'trio.c'
)

build_libs = [{'source':sourceFiles, 'lib':'%s' % LIB_NAME, 'dynamic':False,
        'depends':[]}]
env.Append(CPPPATH = include_path)
libs = scons_utils.makeLibs(env, build_libs, local_lib, [])

#==============================================================================#

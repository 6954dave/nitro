import sys, os, glob

sys.path.append('../../build/utils')
import scons_utils
sys.path.pop()

LIB_NAME = 'nitf'

# Handle command-line options
opts = scons_utils.addDefaultOptions(Options())
env = Environment(options = opts, ENV = os.environ)
Help(opts.GenerateHelpText(env))

# Get the target name, and setup all the system-dependent flags and libs
local_lib = scons_utils.doConfigure(env)
print "Building %s for %s" % (LIB_NAME, env['PLATFORM'])
sourceFiles = scons_utils.getSourceFiles('./source', ext='.cpp', platform=env['PLATFORM'])
myLibSuffix = 'c++'
myLibStr = '%s-' + myLibSuffix

#setup the path/lib vars
depends = ['mt', 'sys', 'str', 'except']
build_libs = [{'source':sourceFiles, 'lib':'%s-%s' % (LIB_NAME, myLibSuffix), 'depends':['nitf-c'] + [myLibStr % dep for dep in depends]},]
include_path = ['include', '../include'] + ['../%s/include' % p for p in depends] + \
               ['../../c/nitf/include']
lib_path = [('../%s/%s' % (p, local_lib)) for p in depends] + \
           ['../../c/nitf/%s' % local_lib]
env.Append(CPPPATH = include_path)
env.Append(CCFLAGS = ['-DNITF_MODULE_EXPORTS'])

#make the lib(s)
libs = scons_utils.makeLibs(env, build_libs, local_lib, lib_path)

TESTS = ['test_dump_record.cpp', 'test_writer_3.cpp',]

#make the tests
for test in glob.glob('tests/*.cpp'):
    if os.path.split(test)[1] in TESTS:
        testexe = env.Program(test.strip('.cpp'), [test],
              LIBS=['%s-%s' % (LIB_NAME, myLibSuffix)] + [myLibStr % dep for dep in depends] + ['nitf-c'] + env['LIBS'],
              LIBPATH=lib_path + [local_lib] + env['LIBPATH'])

import os
import Options


def build(bld):
    variant = bld.env['VARIANT']
    env = bld.env_of_name(variant)
    env.set_variant(variant)
        
    includes = ['include']
    libname = 'nitf'
    
    lib = bld.new_task_gen('cc', 'staticlib', includes=includes,
                           target='%s-c' % libname,
                           export_incdirs=includes,
                           uselib = 'THREAD DL MATH NITRO'.split(),
                           defines = 'NITF_MODULE_EXPORTS',
                           name='NITRO')
    lib.find_sources_in_dirs('./source', excludes=[])
    
    #make all of plug-ins normally - as separate DSOs
    pluginNode = bld.path.find_dir('shared')
    libPattern = env['shlib_PATTERN']
    if libPattern.startswith('lib'):
        libPattern = libPattern[3:]
    for p in pluginNode.find_iter(in_pat=['*.c'], maxdepth=1, flat=True).split(' '):
        pEnv = env.copy()
        pEnv['shlib_PATTERN'] = libPattern
        plugin = bld.new_task_gen('cc', 'shlib', source=p,
                                  uselib_local='NITRO',
                                  target=os.path.splitext(p)[0],
                                  path=pluginNode, env=pEnv,
                                  install_path='${PREFIX}/share/nitf/plugins')
    
    #now, to support static linkage, make the plug-ins as a static library
    lib = bld.new_task_gen('cc', 'staticlib', includes=includes,
                           target='%s-handlers' % libname,
                           uselib_local = 'NITRO')
    lib.find_sources_in_dirs('./shared', excludes=[])
        
    
    #build tests
    testDir = bld.path.find_dir('tests')
    tests = testDir.find_iter(in_pat=['test*.c'],
                              ex_pat=['test_1band_rw_line.c', 'test_fileIO.c',
                                      'test_hash_table_2.c', 'test_writer_s.c',
                                      'test_des_read.c', 'test_read_acftb.c',
                                      'test_add_masks.c', 'test_plugin_reg_1.c',
                                      'test_des_write.c', 'test_ImageIO_support.c',
                                      'test_make_pattern.c', 'test_des.c',
                                      'test_ext_iter.c', 'test_ImageIO_read_data.c',
                                      'test_ImageIO_writePattern.c', 'test_static_plugin.c'],
                              maxdepth=1, flat=True).split(' ')
    for test in tests:
        exe = bld.new_task_gen('cc', 'program', source=test,
                               uselib_local='NITRO',
                               target=os.path.splitext(test)[0],
                               path=testDir,
                               install_path='${PREFIX}/share/nitf/tests')
    
    #install headers
    for f in bld.path.find_dir('include').find_iter():
        relpath = f.relpath_gen(bld.path)
        bld.install_files('${PREFIX}/%s' % os.path.dirname(relpath), relpath)
        
    #run doxygen
    if 'DOXYGEN' in env and Options.is_install:
        bld.new_task_gen(rule='${DOXYGEN}', cwd=bld.path.abspath(), always=True)
        try:
            htmlDocs = bld.path.find_dir('doc/html')
            for f in htmlDocs.find_iter():
                relpath = f.relpath_gen(htmlDocs)
                bld.install_files('${PREFIX}/share/doc/nitf/c/%s' % relpath, f.abspath())
        except:{}

import os, subprocess
import Options
from os.path import splitext, dirname, join

NAME            = 'nitf'
MAINTAINER      = 'tzellman@users.sourceforge.net gojira_1@users.sourceforge.net'
VERSION         = '2.7-dev'
MODULE_DEPS     = 'nrt'
LANG            = 'c'
USELIB          = 'THREAD DL MATH nitf-c'
DEFINES         = 'NITF_MODULE_EXPORTS'
TEST_FILTER     = lambda x: x not in ['test_1band_rw_line.c', 'test_fileIO.c',
                                      'test_hash_table_2.c', 'test_writer_s.c',
                                      'test_des_read.c', 'test_read_acftb.c',
                                      'test_add_masks.c', 'test_plugin_reg_1.c',
                                      'test_des_write.c', 'test_ImageIO_support.c',
                                      'test_make_pattern.c', 'test_des.c',
                                      'test_ext_iter.c', 'test_ImageIO_read_data.c',
                                      'test_ImageIO_writePattern.c', 'test_static_plugin.c']


options = distclean = lambda p: None

def configure(conf):
    conf.env.append_value('CFLAGS_nitf-c', '-DNITF_MODULE_EXPORTS')
    conf.env.append_value('CXXFLAGS_nitf-c', '-DNITF_MODULE_EXPORTS')

def build(bld):
    env = bld.module(**globals())
    
    #make all of plug-ins normally - as separate DSOs
    pluginNode = bld.path.find_dir('shared')
    pEnv = env.copy()
    if pEnv['cshlib_PATTERN'].startswith('lib'):
        pEnv['cshlib_PATTERN'] = pEnv['shlib_PATTERN'][3:]
    
    uselib_local = 'nitf-c nrt-c'
    
    pluginList = []
    pluginObjects = []
    plugins = pluginNode.ant_glob('*.c', excl=['J2KDecompress.c', 'J2KCompress.c'])
    plugins.sort()
    
    for p in plugins:
        pluginName = splitext(str(p))[0]
        plugin = bld.new_task_gen(features='c', source=p,
                                  target='%s_obj' % pluginName,
                                  includes=['../include', '../../nrt/include'],
                                  defines = 'NITF_MODULE_EXPORTS',
                                  path=pluginNode, env=env.copy())
        plugin = bld.new_task_gen(features='c cshlib', use=uselib_local,
                                  target=pluginName, add_objects='%s_obj' % pluginName,
                                  path=pluginNode, env=pEnv.copy(),
                                  install_path='${PREFIX}/share/nitf/plugins')
        pluginObjects.append('%s_obj' % pluginName)
        pluginList.append(pluginName)
    
    #now, to support static linkage, make the plug-ins as a static library
    lib = bld.new_task_gen(features='c cstlib', includes='include',
                           target='%s-handlers' % NAME, env=env.copy(),
                           use = uselib_local, add_objects = pluginObjects)
    
    #J2K plug-ins
    if env['CFLAGS_j2k-c']:
        for f in ['J2KDecompress.c', 'J2KCompress.c']:
            pluginName = splitext(f)[0]
            bld.new_task_gen(features='c cshlib', source=f,
                             target=pluginName,
                             use='nitf-c j2k-c nrt-c',
                             path=pluginNode, env=pEnv.copy(),
                             install_path='${PREFIX}/share/nitf/plugins')
            pluginList.append(pluginName)
    
    #build apps
    appsDir = bld.path.find_dir('apps')
    apps = appsDir.ant_glob('*.c')
    for app in apps:
        bld.program_helper(dir='apps', source=str(app), module_deps=NAME, name=str(app)[:-2],
                           lang='c')

        
    #run doxygen
    if 'DOXYGEN' in env and Options.is_install:
        bld.new_task_gen(rule='${DOXYGEN}', cwd=bld.path.abspath(), always=True)
        try:
            htmlDocs = bld.path.find_dir('doc/html')
            for f in htmlDocs.find_iter():
                relpath = f.relpath_gen(htmlDocs)
                bld.install_files('${PREFIX}/share/doc/nitf/c/%s' % relpath, f.abspath())
        except:{}
    
    bld(features='add_targets', target='nitro-plugins',
            targets_to_add=pluginList)
    bld(features='add_targets', target='nitro',
            targets_to_add=pluginList + ['nitf-handlers'])


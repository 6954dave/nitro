import os, subprocess
from waflib import Options
from os.path import splitext, dirname, join

MAINTAINER      = 'adam.sylvester@gd-ais.com'
VERSION         = '1.0'
LANG            = 'c'

configure = options = distclean = lambda p: None

def build(bld):
    pluginNode = bld.path
    
    # This is so that on Unix we name the plugins without the 'lib' prefix
    env = bld.env.derive()
    if env['cshlib_PATTERN'].startswith('lib'):
        env['cshlib_PATTERN'] = env['cshlib_PATTERN'][3:]
    
    pluginList = []
    plugins = pluginNode.ant_glob('*.c')

    for p in plugins:
        filename = str(p)
        isJ2KPlugin = filename in ['J2KDecompress.c', 'J2KCompress.c']
        if isJ2KPlugin and not env['CFLAGS_j2k-c']:
            continue

        kw = globals()
        pluginName = splitext(filename)[0]
        kw['name'] = pluginName
        kw['libname'] = pluginName
        kw['source'] = filename
        kw['use'] = 'nitf-c'
        kw['plugin'] = 'nitf'
        kw['env'] = env
        
        if isJ2KPlugin:
            kw['use'] += ' j2k-c'
            kw['defines'] = ['HAVE_J2K_H', 'J2K_MODULE_EXPORTS']
        else:
            kw['defines'] = 'NITF_MODULE_EXPORTS'
        
        bld.plugin(**kw)
        pluginList.append(pluginName)

    bld(features='add_targets', target='nitro-plugins',
        targets_to_add=pluginList)

import os
import Options, Build

def set_options(opt):
    opt.tool_options('javaw')
    opt.add_option('--disable-java', action='store_false', dest='java',
                   help='Disable java (default)', default=False)
    opt.add_option('--enable-java', action='store_true', dest='java',
                   help='Enable java')
    opt.add_option('--with-java-home', action='store', dest='java_home',
                   help='Specify the location of the java home')


def configure(conf):
    if not Options.options.java:
        return
    
    from build import recursiveGlob
    
    if Options.options.java_home:
        conf.environ['JAVA_HOME'] = Options.options.java_home 
    
    conf.check_tool('javaw')
    
    #copied from the waf trunk - which I committed - this is required until we
    #start using a version higher than 1.5.8
    
    """
    Check for jni headers and libraries

    On success the environment variable xxx_JAVA is added for uselib
    """

    if not conf.env.CC_NAME and not conf.env.CXX_NAME:
        conf.fatal('load a compiler first (gcc, g++, ..)')

    if not conf.env.JAVA_HOME:
        conf.fatal('set JAVA_HOME in the system environment')

    # jni requires the jvm
    javaHome = conf.env['JAVA_HOME'][0]

    b = Build.BuildContext()
    b.load_dirs(conf.srcdir, conf.blddir)
    dir = b.root.find_dir(javaHome + '/include')
    if not dir:
        conf.fatal('could not find include directory in %r (see config.log)' % javaHome)
    
    incDirs = map(lambda x: os.path.dirname(x),
                  recursiveGlob(dir.abspath(), ['jni.h', 'jni_md.h']))
#    f = dir.ant_glob('**/(jni|jni_md).h', flat=False)
#    incDirs = [x.parent.abspath() for x in f]

    dir = b.root.find_dir(javaHome)
    if not dir:
        conf.fatal('could not find JAVA_HOME directory %r (see config.log)' % javaHome)
    libDirs = map(lambda x: os.path.dirname(x),
                  recursiveGlob(dir.abspath(), ['*jvm.so', '*jvm.lib', '*jvm.dll']))
#    f = dir.ant_glob('**/*jvm.(so|dll)', flat=False)
#    libDirs = [x.parent.abspath() for x in f] or [javaHome]

    for i, d in enumerate(libDirs):
        if conf.check(header_name='jni.h', define_name='HAVE_JNI_H', lib='jvm',
                libpath=[d], includes=incDirs, uselib_store='JAVA', uselib='JAVA'):
            break
    else:
        conf.fatal('could not find lib jvm in %r (see config.log)' % libDirs)

def build(bld):
    variant = bld.env['VARIANT'] or 'default'
    env = bld.env_of_name(variant)
    
    if 'JAVA' not in env:
        return #don't build anything then
    
    bld.add_subdirs('nitf cgm')

def distclean(context):
    pass

import sys, os, glob

sys.path.append('../../build/utils')
import scons_utils
sys.path.pop()

################################################################################
# PROJECT SPECIFIC VARS/CODE
################################################################################
#==============================================================================#

LIB_NAME = 'cgm-jni'

# Handle command-line options
opts = scons_utils.addDefaultOptions(Options())
env = Environment(options = opts, ENV = os.environ)
Help(opts.GenerateHelpText(env))

# Get the target name, and setup all the system-dependent flags and libs
local_lib = scons_utils.doConfigure(env)
print "Building %s for %s" % (LIB_NAME, env['PLATFORM'])
sourceFiles = scons_utils.getSourceFiles('./src/jni/source', ext='.c', platform=env['PLATFORM'])

#setup the path/lib vars
depends = ['cgm-c', 'nitf-c']
build_libs = [{'source':sourceFiles, 'lib':'%s' % LIB_NAME, 'depends':depends, 'dynamic':True},]
include_path = ['src/jni/include', '../../c/nitf/include', '../../c/cgm/include']
lib_path = ['../../c/%s/%s' % (p, local_lib) for p in ['nitf', 'cgm']]
env.Append(CPPPATH = include_path)

env.Append(CCFLAGS = ['-DNITF_MODULE_EXPORTS'])

#make the lib(s)
libs = scons_utils.makeLibs(env, build_libs, local_lib, lib_path)

dirname, filename = os.path.split(str(libs[0][0]))
ext = os.path.splitext(filename)[1]
dll = env.InstallAs(os.path.join(dirname, 'cgm.jni-c%s' % ext), str(libs[0][0]))

#setup install goal
if env.subst('$prefix'):
    prefix = env.subst('$prefix')
    if os.path.exists(prefix):
        os.makedirs(prefix)
    env.Alias(target="install", source=env.Install(dir=os.path.join(prefix, 'lib'),
              source=dll))

#==============================================================================#
